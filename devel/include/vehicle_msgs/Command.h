// Generated by gencpp from file vehicle_msgs/Command.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_COMMAND_H
#define VEHICLE_MSGS_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : theta_l(0.0)
    , theta_r(0.0)
    , torque_fl(0.0)
    , torque_fr(0.0)
    , torque_rl(0.0)
    , torque_rr(0.0)  {
    }
  Command_(const ContainerAllocator& _alloc)
    : theta_l(0.0)
    , theta_r(0.0)
    , torque_fl(0.0)
    , torque_fr(0.0)
    , torque_rl(0.0)
    , torque_rr(0.0)  {
  (void)_alloc;
    }



   typedef double _theta_l_type;
  _theta_l_type theta_l;

   typedef double _theta_r_type;
  _theta_r_type theta_r;

   typedef double _torque_fl_type;
  _torque_fl_type torque_fl;

   typedef double _torque_fr_type;
  _torque_fr_type torque_fr;

   typedef double _torque_rl_type;
  _torque_rl_type torque_rl;

   typedef double _torque_rr_type;
  _torque_rr_type torque_rr;





  typedef boost::shared_ptr< ::vehicle_msgs::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::vehicle_msgs::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::vehicle_msgs::Command > CommandPtr;
typedef boost::shared_ptr< ::vehicle_msgs::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_msgs::Command_<ContainerAllocator1> & lhs, const ::vehicle_msgs::Command_<ContainerAllocator2> & rhs)
{
  return lhs.theta_l == rhs.theta_l &&
    lhs.theta_r == rhs.theta_r &&
    lhs.torque_fl == rhs.torque_fl &&
    lhs.torque_fr == rhs.torque_fr &&
    lhs.torque_rl == rhs.torque_rl &&
    lhs.torque_rr == rhs.torque_rr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_msgs::Command_<ContainerAllocator1> & lhs, const ::vehicle_msgs::Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f166b646303bdf36237e2c962a86181";
  }

  static const char* value(const ::vehicle_msgs::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f166b646303bdf3ULL;
  static const uint64_t static_value2 = 0x6237e2c962a86181ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/Command";
  }

  static const char* value(const ::vehicle_msgs::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 theta_l\n"
"float64 theta_r\n"
"float64 torque_fl\n"
"float64 torque_fr\n"
"float64 torque_rl\n"
"float64 torque_rr\n"
;
  }

  static const char* value(const ::vehicle_msgs::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.theta_l);
      stream.next(m.theta_r);
      stream.next(m.torque_fl);
      stream.next(m.torque_fr);
      stream.next(m.torque_rl);
      stream.next(m.torque_rr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::Command_<ContainerAllocator>& v)
  {
    s << indent << "theta_l: ";
    Printer<double>::stream(s, indent + "  ", v.theta_l);
    s << indent << "theta_r: ";
    Printer<double>::stream(s, indent + "  ", v.theta_r);
    s << indent << "torque_fl: ";
    Printer<double>::stream(s, indent + "  ", v.torque_fl);
    s << indent << "torque_fr: ";
    Printer<double>::stream(s, indent + "  ", v.torque_fr);
    s << indent << "torque_rl: ";
    Printer<double>::stream(s, indent + "  ", v.torque_rl);
    s << indent << "torque_rr: ";
    Printer<double>::stream(s, indent + "  ", v.torque_rr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_COMMAND_H
