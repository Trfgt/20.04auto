# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tracking_msg/TrackingObjectArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import std_msgs.msg
import tracking_msg.msg
import visualization_msgs.msg

class TrackingObjectArray(genpy.Message):
  _md5sum = "780a2d86e719433418ef290ab4f7c9e3"
  _type = "tracking_msg/TrackingObjectArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

float32 car_velocity # car's velocity (m/s)
uint32 size # the number of object
TrackingObject[] array

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: tracking_msg/TrackingObject
Header header

uint32 id
std_msgs/String name # name id
std_msgs/Int32MultiArray bbox2d # bounding box [x,y,x,y]
std_msgs/Float32MultiArray bev # bird eye view , [x,y,x,y,x,y,x,y]
visualization_msgs/Marker bbox # bounding box
geometry_msgs/Point point # object's closest pt (m)
geometry_msgs/Point velocity #x,y,z velocity (m/s)
uint32 state # stationary(0) or moving(1)
uint32 type_id # what is type? with the document
float32 ttc # time to collison
#uint32 inpath # not in my path(0) or in my path(1)

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Int32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
int32[]           data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: std_msgs/Float32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float32[]         data          # array of data


================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2
uint8 DELETEALL=3

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['header','car_velocity','size','array']
  _slot_types = ['std_msgs/Header','float32','uint32','tracking_msg/TrackingObject[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,car_velocity,size,array

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackingObjectArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.car_velocity is None:
        self.car_velocity = 0.
      if self.size is None:
        self.size = 0
      if self.array is None:
        self.array = []
    else:
      self.header = std_msgs.msg.Header()
      self.car_velocity = 0.
      self.size = 0
      self.array = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fI().pack(_x.car_velocity, _x.size))
      length = len(self.array)
      buff.write(_struct_I.pack(length))
      for val1 in self.array:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        _v3 = val1.name
        _x = _v3.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v4 = val1.bbox2d
        _v5 = _v4.layout
        length = len(_v5.dim)
        buff.write(_struct_I.pack(length))
        for val4 in _v5.dim:
          _x = val4.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_2I().pack(_x.size, _x.stride))
        _x = _v5.data_offset
        buff.write(_get_struct_I().pack(_x))
        length = len(_v4.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*_v4.data))
        _v6 = val1.bev
        _v7 = _v6.layout
        length = len(_v7.dim)
        buff.write(_struct_I.pack(length))
        for val4 in _v7.dim:
          _x = val4.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_2I().pack(_x.size, _x.stride))
        _x = _v7.data_offset
        buff.write(_get_struct_I().pack(_x))
        length = len(_v6.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v6.data))
        _v8 = val1.bbox
        _v9 = _v8.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v8.ns
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v8
        buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
        _v11 = _v8.pose
        _v12 = _v11.position
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v13 = _v11.orientation
        _x = _v13
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v14 = _v8.scale
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v8.color
        _x = _v15
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v16 = _v8.lifetime
        _x = _v16
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_locked
        buff.write(_get_struct_B().pack(_x))
        length = len(_v8.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v8.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v8.colors)
        buff.write(_struct_I.pack(length))
        for val3 in _v8.colors:
          _x = val3
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = _v8.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v8.mesh_resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v8.mesh_use_embedded_materials
        buff.write(_get_struct_B().pack(_x))
        _v17 = val1.point
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = val1.velocity
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2If().pack(_x.state, _x.type_id, _x.ttc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.array is None:
        self.array = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.car_velocity, _x.size,) = _get_struct_fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.array = []
      for i in range(0, length):
        val1 = tracking_msg.msg.TrackingObject()
        _v19 = val1.header
        start = end
        end += 4
        (_v19.seq,) = _get_struct_I().unpack(str[start:end])
        _v20 = _v19.stamp
        _x = _v20
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v19.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v19.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        _v21 = val1.name
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v21.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v21.data = str[start:end]
        _v22 = val1.bbox2d
        _v23 = _v22.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v23.dim = []
        for i in range(0, length):
          val4 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.label = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.label = str[start:end]
          _x = val4
          start = end
          end += 8
          (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
          _v23.dim.append(val4)
        start = end
        end += 4
        (_v23.data_offset,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v22.data = s.unpack(str[start:end])
        _v24 = val1.bev
        _v25 = _v24.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v25.dim = []
        for i in range(0, length):
          val4 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.label = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.label = str[start:end]
          _x = val4
          start = end
          end += 8
          (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
          _v25.dim.append(val4)
        start = end
        end += 4
        (_v25.data_offset,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v24.data = s.unpack(str[start:end])
        _v26 = val1.bbox
        _v27 = _v26.header
        start = end
        end += 4
        (_v27.seq,) = _get_struct_I().unpack(str[start:end])
        _v28 = _v27.stamp
        _x = _v28
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v27.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v26.ns = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v26.ns = str[start:end]
        _x = _v26
        start = end
        end += 12
        (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
        _v29 = _v26.pose
        _v30 = _v29.position
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v31 = _v29.orientation
        _x = _v31
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v32 = _v26.scale
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v33 = _v26.color
        _x = _v33
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        _v34 = _v26.lifetime
        _x = _v34
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (_v26.frame_locked,) = _get_struct_B().unpack(str[start:end])
        _v26.frame_locked = bool(_v26.frame_locked)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v26.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v26.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v26.colors = []
        for i in range(0, length):
          val3 = std_msgs.msg.ColorRGBA()
          _x = val3
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v26.colors.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v26.text = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v26.text = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v26.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v26.mesh_resource = str[start:end]
        start = end
        end += 1
        (_v26.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
        _v26.mesh_use_embedded_materials = bool(_v26.mesh_use_embedded_materials)
        _v35 = val1.point
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v36 = val1.velocity
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.state, _x.type_id, _x.ttc,) = _get_struct_2If().unpack(str[start:end])
        self.array.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fI().pack(_x.car_velocity, _x.size))
      length = len(self.array)
      buff.write(_struct_I.pack(length))
      for val1 in self.array:
        _v37 = val1.header
        _x = _v37.seq
        buff.write(_get_struct_I().pack(_x))
        _v38 = _v37.stamp
        _x = _v38
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v37.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        _v39 = val1.name
        _x = _v39.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v40 = val1.bbox2d
        _v41 = _v40.layout
        length = len(_v41.dim)
        buff.write(_struct_I.pack(length))
        for val4 in _v41.dim:
          _x = val4.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_2I().pack(_x.size, _x.stride))
        _x = _v41.data_offset
        buff.write(_get_struct_I().pack(_x))
        length = len(_v40.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(_v40.data.tostring())
        _v42 = val1.bev
        _v43 = _v42.layout
        length = len(_v43.dim)
        buff.write(_struct_I.pack(length))
        for val4 in _v43.dim:
          _x = val4.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_2I().pack(_x.size, _x.stride))
        _x = _v43.data_offset
        buff.write(_get_struct_I().pack(_x))
        length = len(_v42.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v42.data.tostring())
        _v44 = val1.bbox
        _v45 = _v44.header
        _x = _v45.seq
        buff.write(_get_struct_I().pack(_x))
        _v46 = _v45.stamp
        _x = _v46
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v45.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v44.ns
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v44
        buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
        _v47 = _v44.pose
        _v48 = _v47.position
        _x = _v48
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v49 = _v47.orientation
        _x = _v49
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v50 = _v44.scale
        _x = _v50
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v51 = _v44.color
        _x = _v51
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v52 = _v44.lifetime
        _x = _v52
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v44.frame_locked
        buff.write(_get_struct_B().pack(_x))
        length = len(_v44.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v44.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v44.colors)
        buff.write(_struct_I.pack(length))
        for val3 in _v44.colors:
          _x = val3
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = _v44.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v44.mesh_resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v44.mesh_use_embedded_materials
        buff.write(_get_struct_B().pack(_x))
        _v53 = val1.point
        _x = _v53
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v54 = val1.velocity
        _x = _v54
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2If().pack(_x.state, _x.type_id, _x.ttc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.array is None:
        self.array = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.car_velocity, _x.size,) = _get_struct_fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.array = []
      for i in range(0, length):
        val1 = tracking_msg.msg.TrackingObject()
        _v55 = val1.header
        start = end
        end += 4
        (_v55.seq,) = _get_struct_I().unpack(str[start:end])
        _v56 = _v55.stamp
        _x = _v56
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v55.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v55.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        _v57 = val1.name
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v57.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v57.data = str[start:end]
        _v58 = val1.bbox2d
        _v59 = _v58.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v59.dim = []
        for i in range(0, length):
          val4 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.label = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.label = str[start:end]
          _x = val4
          start = end
          end += 8
          (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
          _v59.dim.append(val4)
        start = end
        end += 4
        (_v59.data_offset,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v58.data = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        _v60 = val1.bev
        _v61 = _v60.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v61.dim = []
        for i in range(0, length):
          val4 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.label = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.label = str[start:end]
          _x = val4
          start = end
          end += 8
          (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
          _v61.dim.append(val4)
        start = end
        end += 4
        (_v61.data_offset,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v60.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v62 = val1.bbox
        _v63 = _v62.header
        start = end
        end += 4
        (_v63.seq,) = _get_struct_I().unpack(str[start:end])
        _v64 = _v63.stamp
        _x = _v64
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v63.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v62.ns = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v62.ns = str[start:end]
        _x = _v62
        start = end
        end += 12
        (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
        _v65 = _v62.pose
        _v66 = _v65.position
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v67 = _v65.orientation
        _x = _v67
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v68 = _v62.scale
        _x = _v68
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v69 = _v62.color
        _x = _v69
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        _v70 = _v62.lifetime
        _x = _v70
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (_v62.frame_locked,) = _get_struct_B().unpack(str[start:end])
        _v62.frame_locked = bool(_v62.frame_locked)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v62.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v62.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v62.colors = []
        for i in range(0, length):
          val3 = std_msgs.msg.ColorRGBA()
          _x = val3
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v62.colors.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v62.text = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v62.text = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v62.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v62.mesh_resource = str[start:end]
        start = end
        end += 1
        (_v62.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
        _v62.mesh_use_embedded_materials = bool(_v62.mesh_use_embedded_materials)
        _v71 = val1.point
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v72 = val1.velocity
        _x = _v72
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.state, _x.type_id, _x.ttc,) = _get_struct_2If().unpack(str[start:end])
        self.array.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2If = None
def _get_struct_2If():
    global _struct_2If
    if _struct_2If is None:
        _struct_2If = struct.Struct("<2If")
    return _struct_2If
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_fI = None
def _get_struct_fI():
    global _struct_fI
    if _struct_fI is None:
        _struct_fI = struct.Struct("<fI")
    return _struct_fI
