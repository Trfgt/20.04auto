# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tracking_msg/TrackingObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import std_msgs.msg
import visualization_msgs.msg

class TrackingObject(genpy.Message):
  _md5sum = "dbecf0bde23016151623d97fb0e58ed7"
  _type = "tracking_msg/TrackingObject"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

uint32 id
std_msgs/String name # name id
std_msgs/Int32MultiArray bbox2d # bounding box [x,y,x,y]
std_msgs/Float32MultiArray bev # bird eye view , [x,y,x,y,x,y,x,y]
visualization_msgs/Marker bbox # bounding box
geometry_msgs/Point point # object's closest pt (m)
geometry_msgs/Point velocity #x,y,z velocity (m/s)
uint32 state # stationary(0) or moving(1)
uint32 type_id # what is type? with the document
float32 ttc # time to collison
#uint32 inpath # not in my path(0) or in my path(1)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Int32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
int32[]           data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: std_msgs/Float32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float32[]         data          # array of data


================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2
uint8 DELETEALL=3

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['header','id','name','bbox2d','bev','bbox','point','velocity','state','type_id','ttc']
  _slot_types = ['std_msgs/Header','uint32','std_msgs/String','std_msgs/Int32MultiArray','std_msgs/Float32MultiArray','visualization_msgs/Marker','geometry_msgs/Point','geometry_msgs/Point','uint32','uint32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,name,bbox2d,bev,bbox,point,velocity,state,type_id,ttc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackingObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.name is None:
        self.name = std_msgs.msg.String()
      if self.bbox2d is None:
        self.bbox2d = std_msgs.msg.Int32MultiArray()
      if self.bev is None:
        self.bev = std_msgs.msg.Float32MultiArray()
      if self.bbox is None:
        self.bbox = visualization_msgs.msg.Marker()
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Point()
      if self.state is None:
        self.state = 0
      if self.type_id is None:
        self.type_id = 0
      if self.ttc is None:
        self.ttc = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.name = std_msgs.msg.String()
      self.bbox2d = std_msgs.msg.Int32MultiArray()
      self.bev = std_msgs.msg.Float32MultiArray()
      self.bbox = visualization_msgs.msg.Marker()
      self.point = geometry_msgs.msg.Point()
      self.velocity = geometry_msgs.msg.Point()
      self.state = 0
      self.type_id = 0
      self.ttc = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_I().pack(_x))
      _x = self.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.bbox2d.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox2d.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.bbox2d.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.bbox2d.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.bbox2d.data))
      length = len(self.bev.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.bev.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.bev.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.bev.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.bev.data))
      _x = self
      buff.write(_get_struct_3I().pack(_x.bbox.header.seq, _x.bbox.header.stamp.secs, _x.bbox.header.stamp.nsecs))
      _x = self.bbox.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.bbox.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i10d4f2iB().pack(_x.bbox.id, _x.bbox.type, _x.bbox.action, _x.bbox.pose.position.x, _x.bbox.pose.position.y, _x.bbox.pose.position.z, _x.bbox.pose.orientation.x, _x.bbox.pose.orientation.y, _x.bbox.pose.orientation.z, _x.bbox.pose.orientation.w, _x.bbox.scale.x, _x.bbox.scale.y, _x.bbox.scale.z, _x.bbox.color.r, _x.bbox.color.g, _x.bbox.color.b, _x.bbox.color.a, _x.bbox.lifetime.secs, _x.bbox.lifetime.nsecs, _x.bbox.frame_locked))
      length = len(self.bbox.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bbox.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox.colors:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      _x = self.bbox.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.bbox.mesh_resource
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B6d2If().pack(_x.bbox.mesh_use_embedded_materials, _x.point.x, _x.point.y, _x.point.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.state, _x.type_id, _x.ttc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.name is None:
        self.name = std_msgs.msg.String()
      if self.bbox2d is None:
        self.bbox2d = std_msgs.msg.Int32MultiArray()
      if self.bev is None:
        self.bev = std_msgs.msg.Float32MultiArray()
      if self.bbox is None:
        self.bbox = visualization_msgs.msg.Marker()
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox2d.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.bbox2d.layout.dim.append(val1)
      start = end
      end += 4
      (self.bbox2d.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bbox2d.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bev.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.bev.layout.dim.append(val1)
      start = end
      end += 4
      (self.bev.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bev.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.bbox.header.seq, _x.bbox.header.stamp.secs, _x.bbox.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox.ns = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox.ns = str[start:end]
      _x = self
      start = end
      end += 117
      (_x.bbox.id, _x.bbox.type, _x.bbox.action, _x.bbox.pose.position.x, _x.bbox.pose.position.y, _x.bbox.pose.position.z, _x.bbox.pose.orientation.x, _x.bbox.pose.orientation.y, _x.bbox.pose.orientation.z, _x.bbox.pose.orientation.w, _x.bbox.scale.x, _x.bbox.scale.y, _x.bbox.scale.z, _x.bbox.color.r, _x.bbox.color.g, _x.bbox.color.b, _x.bbox.color.a, _x.bbox.lifetime.secs, _x.bbox.lifetime.nsecs, _x.bbox.frame_locked,) = _get_struct_3i10d4f2iB().unpack(str[start:end])
      self.bbox.frame_locked = bool(self.bbox.frame_locked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bbox.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox.colors = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.bbox.colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox.mesh_resource = str[start:end]
      _x = self
      start = end
      end += 61
      (_x.bbox.mesh_use_embedded_materials, _x.point.x, _x.point.y, _x.point.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.state, _x.type_id, _x.ttc,) = _get_struct_B6d2If().unpack(str[start:end])
      self.bbox.mesh_use_embedded_materials = bool(self.bbox.mesh_use_embedded_materials)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_I().pack(_x))
      _x = self.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.bbox2d.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox2d.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.bbox2d.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.bbox2d.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.bbox2d.data.tostring())
      length = len(self.bev.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.bev.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.bev.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.bev.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.bev.data.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.bbox.header.seq, _x.bbox.header.stamp.secs, _x.bbox.header.stamp.nsecs))
      _x = self.bbox.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.bbox.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i10d4f2iB().pack(_x.bbox.id, _x.bbox.type, _x.bbox.action, _x.bbox.pose.position.x, _x.bbox.pose.position.y, _x.bbox.pose.position.z, _x.bbox.pose.orientation.x, _x.bbox.pose.orientation.y, _x.bbox.pose.orientation.z, _x.bbox.pose.orientation.w, _x.bbox.scale.x, _x.bbox.scale.y, _x.bbox.scale.z, _x.bbox.color.r, _x.bbox.color.g, _x.bbox.color.b, _x.bbox.color.a, _x.bbox.lifetime.secs, _x.bbox.lifetime.nsecs, _x.bbox.frame_locked))
      length = len(self.bbox.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bbox.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox.colors:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      _x = self.bbox.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.bbox.mesh_resource
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B6d2If().pack(_x.bbox.mesh_use_embedded_materials, _x.point.x, _x.point.y, _x.point.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.state, _x.type_id, _x.ttc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.name is None:
        self.name = std_msgs.msg.String()
      if self.bbox2d is None:
        self.bbox2d = std_msgs.msg.Int32MultiArray()
      if self.bev is None:
        self.bev = std_msgs.msg.Float32MultiArray()
      if self.bbox is None:
        self.bbox = visualization_msgs.msg.Marker()
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox2d.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.bbox2d.layout.dim.append(val1)
      start = end
      end += 4
      (self.bbox2d.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bbox2d.data = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bev.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.bev.layout.dim.append(val1)
      start = end
      end += 4
      (self.bev.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bev.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.bbox.header.seq, _x.bbox.header.stamp.secs, _x.bbox.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox.ns = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox.ns = str[start:end]
      _x = self
      start = end
      end += 117
      (_x.bbox.id, _x.bbox.type, _x.bbox.action, _x.bbox.pose.position.x, _x.bbox.pose.position.y, _x.bbox.pose.position.z, _x.bbox.pose.orientation.x, _x.bbox.pose.orientation.y, _x.bbox.pose.orientation.z, _x.bbox.pose.orientation.w, _x.bbox.scale.x, _x.bbox.scale.y, _x.bbox.scale.z, _x.bbox.color.r, _x.bbox.color.g, _x.bbox.color.b, _x.bbox.color.a, _x.bbox.lifetime.secs, _x.bbox.lifetime.nsecs, _x.bbox.frame_locked,) = _get_struct_3i10d4f2iB().unpack(str[start:end])
      self.bbox.frame_locked = bool(self.bbox.frame_locked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bbox.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox.colors = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.bbox.colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox.mesh_resource = str[start:end]
      _x = self
      start = end
      end += 61
      (_x.bbox.mesh_use_embedded_materials, _x.point.x, _x.point.y, _x.point.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.state, _x.type_id, _x.ttc,) = _get_struct_B6d2If().unpack(str[start:end])
      self.bbox.mesh_use_embedded_materials = bool(self.bbox.mesh_use_embedded_materials)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i10d4f2iB = None
def _get_struct_3i10d4f2iB():
    global _struct_3i10d4f2iB
    if _struct_3i10d4f2iB is None:
        _struct_3i10d4f2iB = struct.Struct("<3i10d4f2iB")
    return _struct_3i10d4f2iB
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B6d2If = None
def _get_struct_B6d2If():
    global _struct_B6d2If
    if _struct_B6d2If is None:
        _struct_B6d2If = struct.Struct("<B6d2If")
    return _struct_B6d2If
